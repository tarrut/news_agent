{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Daily News Mail","text":"<p>This repository intends for the user to receive a daily mail with the most relevant daily news.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>To load the configuration, the <code>load_config()</code> function is used:</p>"},{"location":"configuration/#src.config.load_config","title":"<code>src.config.load_config() -&gt; dict[dict]</code>","text":"<p>Function for loading the configuration in .yml files</p> <p>Returns:</p> Type Description <code>dict[dict]</code> <p>Dictionary with the configuration specified inside the config fodler</p> Source code in <code>src\\config.py</code> <pre><code>def load_config() -&gt; dict[dict]:\n    \"\"\"Function for loading the configuration in .yml files\n\n    Returns:\n        Dictionary with the configuration specified inside the config fodler\n    \"\"\"\n\n    config = {}\n\n    base_path = Path(\"./config/\")\n    for file in os.listdir(base_path):\n        filename = os.fsdecode(file)\n        if filename.endswith(\".yml\"):\n            file_path = base_path / filename\n            config[filename.removesuffix(\".yml\")] = yaml.safe_load(open(file_path))\n\n    return config\n</code></pre>"},{"location":"news_fetcher/","title":"News Fetcher","text":"<p>The class <code>NewsFetcher</code> is used to retreive the different news.</p>"},{"location":"news_fetcher/#src.news.news_fetcher.NewsFetcher","title":"<code>src.news.news_fetcher.NewsFetcher</code>","text":"<p>Class for retreiving rss feeds of different newspapers</p> Source code in <code>src\\news\\news_fetcher.py</code> <pre><code>class NewsFetcher:\n    \"\"\"Class for retreiving rss feeds of different newspapers\n    \"\"\"\n\n    def __init__(self):\n        self.selected_news = []\n\n\n    def fetch(self):\n        \"\"\"Main method of the class that retrieves the feeds\n        \"\"\"\n        config = load_config()\n        newspapers_config = config[\"newspapers\"]\n\n        for newspaper_id, config in newspapers_config.items():\n            news = self.read_newspaper(newspaper_id, config)\n            self.selected_news.extend(news)\n\n\n    def get_news(self) -&gt; list[dict]:\n        \"\"\"Getter of the news parameter\n\n        Returns:\n            The list of news as dictionaries.\n        \"\"\"\n        if self.selected_news:\n            return self.selected_news\n\n        print(\"The news have not been fetched yet. Use \\\"NewsFetcher.fetch()\\\" first!\")\n        return\n\n    def read_newspaper(self, newspaper_id: str, config: dict[dict]) -&gt; list[dict]:\n        \"\"\"Reads a single RSS feed and extracts the news\n\n        Args:\n            newspaper_id: Id of the newspaper\n            config: Configuration for fetching the newspaper\n\n        Returns:\n            list of dicts with the news of the newspaper RSS feed\n        \"\"\"\n        response = requests.get(config[\"url\"])\n        if response.status_code != 200:\n            return\n\n        feed_processed = ElementTree.fromstring(response.content)\n        feed_dict = etree_to_dict(feed_processed)\n        news = feed_dict[\"rss\"][\"channel\"][\"item\"]\n\n        for new in news:\n            new[\"newspaper\"] = newspaper_id\n\n        return news\n</code></pre>"},{"location":"news_fetcher/#src.news.news_fetcher.NewsFetcher.fetch","title":"<code>fetch()</code>","text":"<p>Main method of the class that retrieves the feeds</p> Source code in <code>src\\news\\news_fetcher.py</code> <pre><code>def fetch(self):\n    \"\"\"Main method of the class that retrieves the feeds\n    \"\"\"\n    config = load_config()\n    newspapers_config = config[\"newspapers\"]\n\n    for newspaper_id, config in newspapers_config.items():\n        news = self.read_newspaper(newspaper_id, config)\n        self.selected_news.extend(news)\n</code></pre>"},{"location":"news_fetcher/#src.news.news_fetcher.NewsFetcher.get_news","title":"<code>get_news() -&gt; list[dict]</code>","text":"<p>Getter of the news parameter</p> <p>Returns:</p> Type Description <code>list[dict]</code> <p>The list of news as dictionaries.</p> Source code in <code>src\\news\\news_fetcher.py</code> <pre><code>def get_news(self) -&gt; list[dict]:\n    \"\"\"Getter of the news parameter\n\n    Returns:\n        The list of news as dictionaries.\n    \"\"\"\n    if self.selected_news:\n        return self.selected_news\n\n    print(\"The news have not been fetched yet. Use \\\"NewsFetcher.fetch()\\\" first!\")\n    return\n</code></pre>"},{"location":"news_fetcher/#src.news.news_fetcher.NewsFetcher.read_newspaper","title":"<code>read_newspaper(newspaper_id: str, config: dict[dict]) -&gt; list[dict]</code>","text":"<p>Reads a single RSS feed and extracts the news</p> <p>Parameters:</p> Name Type Description Default <code>newspaper_id</code> <code>str</code> <p>Id of the newspaper</p> required <code>config</code> <code>dict[dict]</code> <p>Configuration for fetching the newspaper</p> required <p>Returns:</p> Type Description <code>list[dict]</code> <p>list of dicts with the news of the newspaper RSS feed</p> Source code in <code>src\\news\\news_fetcher.py</code> <pre><code>def read_newspaper(self, newspaper_id: str, config: dict[dict]) -&gt; list[dict]:\n    \"\"\"Reads a single RSS feed and extracts the news\n\n    Args:\n        newspaper_id: Id of the newspaper\n        config: Configuration for fetching the newspaper\n\n    Returns:\n        list of dicts with the news of the newspaper RSS feed\n    \"\"\"\n    response = requests.get(config[\"url\"])\n    if response.status_code != 200:\n        return\n\n    feed_processed = ElementTree.fromstring(response.content)\n    feed_dict = etree_to_dict(feed_processed)\n    news = feed_dict[\"rss\"][\"channel\"][\"item\"]\n\n    for new in news:\n        new[\"newspaper\"] = newspaper_id\n\n    return news\n</code></pre>"}]}